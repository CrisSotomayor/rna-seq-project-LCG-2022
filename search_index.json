[["index.html", "Differential Expression Analysis of BRCA samples Overview Requirements", " Differential Expression Analysis of BRCA samples Cristina Sotomayor Vivas Overview This document contains the final project for the “Introduction to RNA-Seq” module, part of the Bioinformatics and Statistics II class given at LCG-UNAM in February 2022. The original class material from Dr. Leonardo Collado-Torres can be found here. In this project, we will use the recount3 R package to download RNA-Seq data from The Cancer Genome Atlas project, obtaining all the BRCA samples. We will then evaluate the quality of the downloaded data, explore the available sample attributes, select a subset of these to build a statistical model, and perform differential expression analysis. . Requirements We will need R 4.1.x, which can be installed from CRAN, and the following packages. library(&quot;sessioninfo&quot;) # To download data and generate RangedSummarizedExperiment data object library(&quot;recount3&quot;) # To access data on tumor subtype library(&quot;TCGAbiolinks&quot;) # To normalize counts library(&quot;edgeR&quot;) # To plot results library(&quot;ggplot2&quot;) library(&quot;pheatmap&quot;) # For differential expression analysis library(&quot;limma&quot;) ## Reproducibility information options(width = 120) session_info() ## ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── ## setting value ## version R version 4.0.3 (2020-10-10) ## os Ubuntu 20.04 LTS ## system x86_64, linux-gnu ## ui X11 ## language (EN) ## collate en_US.UTF-8 ## ctype en_US.UTF-8 ## tz Etc/UTC ## date 2022-02-11 ## ## ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── ## package * version date lib source ## AnnotationDbi 1.52.0 2020-10-27 [1] Bioconductor ## askpass 1.1 2019-01-13 [2] RSPM (R 4.0.3) ## assertthat 0.2.1 2019-03-21 [2] RSPM (R 4.0.3) ## Biobase * 2.50.0 2020-10-27 [1] Bioconductor ## BiocFileCache 1.14.0 2020-10-27 [1] Bioconductor ## BiocGenerics * 0.36.1 2021-04-16 [1] Bioconductor ## BiocParallel 1.24.1 2020-11-06 [1] Bioconductor ## biomaRt 2.46.3 2021-02-09 [1] Bioconductor ## Biostrings 2.58.0 2020-10-27 [1] Bioconductor ## bit 4.0.4 2020-08-04 [1] RSPM (R 4.0.5) ## bit64 4.0.5 2020-08-30 [1] RSPM (R 4.0.5) ## bitops 1.0-6 2013-08-17 [1] RSPM (R 4.0.3) ## blob 1.2.1 2020-01-20 [1] RSPM (R 4.0.3) ## bookdown 0.21 2020-10-13 [1] RSPM (R 4.0.2) ## cachem 1.0.4 2021-02-13 [2] RSPM (R 4.0.3) ## cli 2.3.0 2021-01-31 [2] RSPM (R 4.0.3) ## colorspace 2.0-0 2020-11-11 [1] RSPM (R 4.0.3) ## crayon 1.4.1 2021-02-08 [2] RSPM (R 4.0.3) ## curl 4.3 2019-12-02 [2] RSPM (R 4.0.3) ## data.table 1.13.6 2020-12-30 [1] RSPM (R 4.0.3) ## DBI 1.1.1 2021-01-15 [1] RSPM (R 4.0.3) ## dbplyr 2.1.0 2021-02-03 [1] RSPM (R 4.0.3) ## DelayedArray 0.16.3 2021-03-24 [1] Bioconductor ## digest 0.6.27 2020-10-24 [2] RSPM (R 4.0.3) ## downloader 0.4 2015-07-09 [1] RSPM (R 4.0.3) ## dplyr 1.0.4 2021-02-02 [1] RSPM (R 4.0.3) ## edgeR * 3.32.1 2021-01-14 [1] Bioconductor ## ellipsis 0.3.1 2020-05-15 [2] RSPM (R 4.0.3) ## evaluate 0.14 2019-05-28 [2] RSPM (R 4.0.3) ## fastmap 1.1.0 2021-01-25 [2] RSPM (R 4.0.3) ## generics 0.1.0 2020-10-31 [1] RSPM (R 4.0.3) ## GenomeInfoDb * 1.26.7 2021-04-08 [1] Bioconductor ## GenomeInfoDbData 1.2.4 2022-02-11 [1] Bioconductor ## GenomicAlignments 1.26.0 2020-10-27 [1] Bioconductor ## GenomicRanges * 1.42.0 2020-10-27 [1] Bioconductor ## ggplot2 * 3.3.3 2020-12-30 [1] RSPM (R 4.0.3) ## glue 1.4.2 2020-08-27 [2] RSPM (R 4.0.3) ## gtable 0.3.0 2019-03-25 [1] RSPM (R 4.0.3) ## hms 1.0.0 2021-01-13 [1] RSPM (R 4.0.3) ## htmltools 0.5.1.1 2021-01-22 [2] RSPM (R 4.0.3) ## httr 1.4.2 2020-07-20 [2] RSPM (R 4.0.3) ## IRanges * 2.24.1 2020-12-12 [1] Bioconductor ## jsonlite 1.7.2 2020-12-09 [2] RSPM (R 4.0.3) ## knitr 1.31 2021-01-27 [2] RSPM (R 4.0.3) ## lattice 0.20-41 2020-04-02 [3] CRAN (R 4.0.3) ## lifecycle 1.0.0 2021-02-15 [2] RSPM (R 4.0.3) ## limma * 3.46.0 2020-10-27 [1] Bioconductor ## locfit 1.5-9.4 2020-03-25 [1] RSPM (R 4.0.3) ## magrittr 2.0.1 2020-11-17 [2] RSPM (R 4.0.3) ## Matrix 1.3-2 2021-01-06 [3] RSPM (R 4.0.3) ## MatrixGenerics * 1.2.1 2021-01-30 [1] Bioconductor ## matrixStats * 0.58.0 2021-01-29 [1] RSPM (R 4.0.3) ## memoise 2.0.0 2021-01-26 [2] RSPM (R 4.0.3) ## munsell 0.5.0 2018-06-12 [1] RSPM (R 4.0.3) ## openssl 1.4.3 2020-09-18 [2] RSPM (R 4.0.3) ## pheatmap * 1.0.12 2019-01-04 [1] RSPM (R 4.0.3) ## pillar 1.4.7 2020-11-20 [2] RSPM (R 4.0.3) ## pkgconfig 2.0.3 2019-09-22 [2] RSPM (R 4.0.3) ## plyr 1.8.6 2020-03-03 [1] RSPM (R 4.0.3) ## prettyunits 1.1.1 2020-01-24 [2] RSPM (R 4.0.3) ## progress 1.2.2 2019-05-16 [1] RSPM (R 4.0.3) ## purrr 0.3.4 2020-04-17 [2] RSPM (R 4.0.3) ## R.methodsS3 1.8.1 2020-08-26 [1] RSPM (R 4.0.3) ## R.oo 1.24.0 2020-08-26 [1] RSPM (R 4.0.3) ## R.utils 2.10.1 2020-08-26 [1] RSPM (R 4.0.3) ## R6 2.5.0 2020-10-28 [2] RSPM (R 4.0.3) ## rappdirs 0.3.3 2021-01-31 [2] RSPM (R 4.0.3) ## RColorBrewer 1.1-2 2014-12-07 [1] RSPM (R 4.0.3) ## Rcpp 1.0.6 2021-01-15 [2] RSPM (R 4.0.3) ## RCurl 1.98-1.2 2020-04-18 [1] RSPM (R 4.0.3) ## readr 1.4.0 2020-10-05 [1] RSPM (R 4.0.3) ## recount3 * 1.0.7 2021-02-11 [1] Bioconductor ## rlang 0.4.10 2020-12-30 [2] RSPM (R 4.0.3) ## rmarkdown 2.6 2020-12-14 [1] RSPM (R 4.0.3) ## Rsamtools 2.6.0 2020-10-27 [1] Bioconductor ## RSQLite 2.2.3 2021-01-24 [1] RSPM (R 4.0.3) ## rstudioapi 0.13 2020-11-12 [2] RSPM (R 4.0.3) ## rtracklayer 1.50.0 2020-10-27 [1] Bioconductor ## rvest 0.3.6 2020-07-25 [1] RSPM (R 4.0.3) ## S4Vectors * 0.28.1 2020-12-09 [1] Bioconductor ## scales 1.1.1 2020-05-11 [1] RSPM (R 4.0.3) ## sessioninfo * 1.1.1 2018-11-05 [1] RSPM (R 4.0.3) ## stringi 1.5.3 2020-09-09 [2] RSPM (R 4.0.3) ## stringr 1.4.0 2019-02-10 [2] RSPM (R 4.0.3) ## SummarizedExperiment * 1.20.0 2020-10-27 [1] Bioconductor ## TCGAbiolinks * 2.18.0 2020-10-27 [1] Bioconductor ## TCGAbiolinksGUI.data 1.10.0 2020-10-29 [1] Bioconductor ## tibble 3.0.6 2021-01-29 [2] RSPM (R 4.0.3) ## tidyr 1.1.2 2020-08-27 [1] RSPM (R 4.0.3) ## tidyselect 1.1.0 2020-05-11 [1] RSPM (R 4.0.3) ## vctrs 0.3.6 2020-12-17 [2] RSPM (R 4.0.3) ## withr 2.4.1 2021-01-26 [2] RSPM (R 4.0.3) ## xfun 0.21 2021-02-10 [2] RSPM (R 4.0.3) ## XML 3.99-0.5 2020-07-23 [1] RSPM (R 4.0.3) ## xml2 1.3.2 2020-04-23 [2] RSPM (R 4.0.3) ## XVector 0.30.0 2020-10-27 [1] Bioconductor ## yaml 2.2.1 2020-02-01 [2] RSPM (R 4.0.3) ## zlibbioc 1.36.0 2020-10-27 [1] Bioconductor ## ## [1] /__w/_temp/Library ## [2] /usr/local/lib/R/site-library ## [3] /usr/local/lib/R/library proc.time() ## user system elapsed ## 10.012 0.437 12.819 "],["downloading-data.html", "1 Downloading Data 1.1 Downloading through recount 3 1.2 Obtaining read counts 1.3 Exploring data 1.4 Quality control", " 1 Downloading Data The first step in the project is obtaining the data that we will analyze, as well as processing it so it is in the format we need for further study. 1.1 Downloading through recount 3 recount3 is a project that provides access to over 750,000 publicly available human and mouse RNA-seq samples, all uniformly processed. The original documentation can be found here. For this project, we will be working with BRCA data from The Cancer Genome Atlas Program (TCGA). We will begin by loading the recount3 package and its dependencies. ## Load recount3 R package library(&quot;recount3&quot;) The data available in the recount3 project can be explored here. To download the data we are interested in, we will use the following code. # Create RangedSummarizedExperiment (RSE) object rse_BRCA &lt;- recount3::create_rse_manual( project = &quot;BRCA&quot;, project_home = &quot;data_sources/tcga&quot;, organism = &quot;human&quot;, annotation = &quot;gencode_v29&quot;, type = &quot;gene&quot; ) rse_BRCA ## class: RangedSummarizedExperiment ## dim: 64837 1256 ## metadata(8): time_created recount3_version ... annotation recount3_url ## assays(1): raw_counts ## rownames(64837): ENSG00000278704.1 ENSG00000277400.1 ... ENSG00000182484.15_PAR_Y ENSG00000227159.8_PAR_Y ## rowData names(10): source type ... havana_gene tag ## colnames(1256): 0b1cf6de-f98f-4020-baa7-c4fc518e5f00 20c90e97-e900-488e-af6a-6648d9a8bb01 ... ## a340e38d-af36-4b13-add3-50be6819d4fe a79dd5b2-f97a-4b24-b762-fea1cd5238fe ## colData names(937): rail_id external_id ... recount_seq_qc.errq BigWigURL This data set includes 63856 genes, and 1256 samples. 1.2 Obtaining read counts The RSE object contains the raw base-pair counts, to compute the read counts, we use the following code. # Saving read counts as an assay in the rse object assay(rse_BRCA, &quot;counts&quot;) &lt;- compute_read_counts(rse_BRCA) 1.3 Exploring data Our data is stored as a RangedSummarizedExperiment object, which includes data for both the samples (columns), and the genes (rows), as well as metadata and the assays (counts, in this case). We will first perform quality control, and then select some sample attributes for our model. # Number of samples and number of sample attributes dim(colData(rse_BRCA)) ## [1] 1256 937 For our 1256 samples, there are 937 columns, corresponding to 937 possible attributes to include in our model. To reduce the options, we will first filter by removing those attributes with only NA values. # Keep only non-empty columns colData(rse_BRCA) &lt;- colData(rse_BRCA)[, colSums(is.na(colData(rse_BRCA))) != nrow(colData(rse_BRCA))] dim(colData(rse_BRCA)) ## [1] 1256 388 This leaves us with 388 columns. These attributes have terms separated by periods, we can explore the source of each attribute by selecting the first keyword of each one to see what kind of information we have. # Split each string by &#39;.&#39; split_col_names &lt;- strsplit(colnames(colData(rse_BRCA)), &quot;.&quot;, fixed=TRUE) # Keep only first element split_col_names &lt;- sapply(split_col_names, getElement, 1) # Counting the results table(split_col_names) ## split_col_names ## BigWigURL external_id rail_id recount_project recount_qc recount_seq_qc study ## 1 1 1 5 79 12 1 ## tcga ## 288 Our main sources of information are from recount and from tcga. 1.4 Quality control Let’s look at both recount_qc and recount_seq_qc for quality control. The meaning of the different fields can be found in the documentation. colnames(colData(rse_BRCA))[grepl(&#39;^recount_seq_qc&#39;, colnames(colData(rse_BRCA)))] ## [1] &quot;recount_seq_qc.min_len&quot; &quot;recount_seq_qc.max_len&quot; ## [3] &quot;recount_seq_qc.avg_len&quot; &quot;recount_seq_qc.#distinct_quality_values&quot; ## [5] &quot;recount_seq_qc.#bases&quot; &quot;recount_seq_qc.%a&quot; ## [7] &quot;recount_seq_qc.%c&quot; &quot;recount_seq_qc.%g&quot; ## [9] &quot;recount_seq_qc.%t&quot; &quot;recount_seq_qc.%n&quot; ## [11] &quot;recount_seq_qc.avgq&quot; &quot;recount_seq_qc.errq&quot; head(colnames(colData(rse_BRCA))[grepl(&#39;^recount_qc&#39;, colnames(colData(rse_BRCA)))], 10) ## [1] &quot;recount_qc.aligned_reads%.chrm&quot; &quot;recount_qc.aligned_reads%.chrx&quot; ## [3] &quot;recount_qc.aligned_reads%.chry&quot; &quot;recount_qc.bc_auc.all_reads_all_bases&quot; ## [5] &quot;recount_qc.bc_auc.all_reads_annotated_bases&quot; &quot;recount_qc.bc_auc.unique_reads_all_bases&quot; ## [7] &quot;recount_qc.bc_auc.unique_reads_annotated_bases&quot; &quot;recount_qc.bc_auc.all_%&quot; ## [9] &quot;recount_qc.bc_auc.unique_%&quot; &quot;recount_qc.bc_frag.count&quot; # The field `recount_seq_qc.avgq` corresponds to the weighted average over Phred quality scores summary(rse_BRCA$recount_seq_qc.avgq) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 21.10 36.90 37.40 37.31 37.90 39.00 All Phred scores are above 20, meaning all samples are estimated to be at least 99% accurate. # Exploring unmapped reads summary(rse_BRCA$&#39;recount_qc.star.%_of_reads_unmapped:_other&#39;) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.01000 0.03000 0.04000 0.05249 0.05000 1.31000 summary(rse_BRCA$&#39;recount_qc.star.%_of_reads_unmapped:_too_many_mismatches&#39;) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0 0 0 0 0 0 summary(rse_BRCA$&#39;recount_qc.star.%_of_reads_unmapped:_too_short&#39;) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 2.030 4.990 5.650 6.319 6.522 56.120 There are few unmapped reads, except for some that are too short. # Exploring mismatch rate summary(rse_BRCA$&#39;recount_qc.star.mismatch_rate_per_base,_%&#39;) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 0.1400 0.2500 0.2900 0.3026 0.3400 0.7100 Very small percentage of mismatches per base. Overall, it seems that the samples are good quality, and we will proceed with the selection of attributes for our model. "],["building-a-statistical-model.html", "2 Building a statistical model 2.1 Exploring attributes 2.2 Normalizing data 2.3 Exploring relationships between variables", " 2 Building a statistical model 2.1 Exploring attributes We previously saw that our main sources of information are from recount quality control and from tcga. For the model, we will look at information from tcga. head(colnames(colData(rse_BRCA))[grepl(&#39;^tcga&#39;, colnames(colData(rse_BRCA)))], 10) ## [1] &quot;tcga.tcga_barcode&quot; &quot;tcga.gdc_file_id&quot; &quot;tcga.gdc_cases.project.name&quot; ## [4] &quot;tcga.gdc_cases.project.released&quot; &quot;tcga.gdc_cases.project.state&quot; &quot;tcga.gdc_cases.project.primary_site&quot; ## [7] &quot;tcga.gdc_cases.project.project_id&quot; &quot;tcga.cgc_sample_sample_type&quot; &quot;tcga.gdc_cases.case_id&quot; ## [10] &quot;tcga.gdc_updated_datetime&quot; Looking through the full list, some possible columns to select for our analysis are the following: “tcga.gdc_cases.diagnoses.classification_of_tumor” “tcga.gdc_cases.diagnoses.primary_diagnosis” “tcga.gdc_cases.diagnoses.tumor_stage” “tcga.gdc_cases.diagnoses.age_at_diagnosis” “tcga.cgc_case_age_at_diagnosis” “tcga.xml_histological_type” “tcga.xml_distant_metastasis_present_ind2” We can check each one to see what kind of information they contain, and select the most useful ones. # Essentially empty, either not reported or NA table(rse_BRCA$tcga.gdc_cases.diagnoses.classification_of_tumor) ## ## not reported ## 1246 # Not very useful, as most samples have the same value # c50.9 = Malignant neoplasm: Breast, unspecified table(rse_BRCA$tcga.gdc_cases.diagnoses.primary_diagnosis) ## ## c50.2 c50.3 c50.4 c50.5 c50.8 c50.9 c50.919 ## 2 6 5 1 3 1228 1 # Useful information, it appears most samples have it and we have different levels table(rse_BRCA$tcga.gdc_cases.diagnoses.tumor_stage) ## ## not reported stage i stage ia stage ib stage ii stage iia stage iib stage iii stage iiia ## 12 106 96 6 6 408 299 2 174 ## stage iiib stage iiic stage iv stage x ## 31 71 22 13 # Two very similar columns # It appears the first is in days, the second in years, we will use the second one head(rse_BRCA$tcga.gdc_cases.diagnoses.age_at_diagnosis) ## [1] 16689 24544 17420 25186 27934 25263 head(rse_BRCA$tcga.cgc_case_age_at_diagnosis) ## [1] 45 67 47 68 76 69 # Different categories, it appears all samples have data table(rse_BRCA$tcga.xml_histological_type) ## ## Infiltrating Carcinoma NOS Infiltrating Ductal Carcinoma Infiltrating Lobular Carcinoma ## 1 896 219 ## Medullary Carcinoma Metaplastic Carcinoma Mixed Histology (please specify) ## 8 13 39 ## Mucinous Carcinoma Other, specify ## 18 51 # Useful information, but not all samples have data table(rse_BRCA$tcga.xml_distant_metastasis_present_ind2) ## ## NO YES ## 466 17 From this, we select “tcga.gdc_cases.diagnoses.tumor_stage” and “tcga.cgc_case_age_at_diagnosis”. For this particular analysis, instead of using the histological type, we are interested in the PAM50 subtype, which we will add to the data later. For the tumor stage, we will reduce the number of levels by ignoring the sub-stage, as well as stage X (undetermined stage), keeping only stage I, stage II, stage III and stage IV. # Remove a, b, c termination, store in new col rse_BRCA$tumor_stage &lt;- gsub(&#39;[abc]$&#39;, &#39;&#39;, rse_BRCA$tcga.gdc_cases.diagnoses.tumor_stage) # Replace stage x and not reported with NA rse_BRCA$tumor_stage &lt;- gsub(&#39;stage x|not reported&#39;, NA, rse_BRCA$tumor_stage) # Store data as numbers, as stage I is least advanced, stage IV most advanced rse_BRCA$tumor_stage &lt;- gsub(&#39;stage iv&#39;, 4, rse_BRCA$tumor_stage) rse_BRCA$tumor_stage &lt;- gsub(&#39;stage iii&#39;, 3, rse_BRCA$tumor_stage) rse_BRCA$tumor_stage &lt;- gsub(&#39;stage ii&#39;, 2, rse_BRCA$tumor_stage) rse_BRCA$tumor_stage &lt;- gsub(&#39;stage i&#39;, 1, rse_BRCA$tumor_stage) table(rse_BRCA$tumor_stage) ## ## 1 2 3 4 ## 208 713 278 22 # Store age in new column for easier selection rse_BRCA$age &lt;- rse_BRCA$tcga.cgc_case_age_at_diagnosis To obtain the PAM50 subtypes, we will need the package TCGAbiolinks. The function TCGAquery_subtype allows us to retrieve molecular subtype data. The documentation can be found here. library(&quot;TCGAbiolinks&quot;) # We will store patient and subtype subtypes &lt;- TCGAquery_subtype(tumor = &quot;brca&quot;)[, c(&quot;patient&quot;, &quot;BRCA_Subtype_PAM50&quot;)] ## brca subtype information from:doi.org/10.1016/j.ccell.2018.03.014 subtypes &lt;- as.data.frame(subtypes) nrow(subtypes) ## [1] 1087 We have information for 1087 of the 1256 samples. Now, we need to match this information to our table. head(subtypes$patient) ## [1] &quot;TCGA-3C-AAAU&quot; &quot;TCGA-3C-AALI&quot; &quot;TCGA-3C-AALJ&quot; &quot;TCGA-3C-AALK&quot; &quot;TCGA-4H-AAAK&quot; &quot;TCGA-5L-AAT0&quot; head(rse_BRCA$tcga.tcga_barcode) ## [1] &quot;TCGA-E9-A249-01A-11R-A169-07&quot; &quot;TCGA-BH-A1EX-01A-11R-A13Q-07&quot; &quot;TCGA-AO-A12A-01A-21R-A115-07&quot; ## [4] &quot;TCGA-AC-A3OD-01B-06R-A22O-07&quot; &quot;TCGA-AC-A23G-01A-11R-A213-07&quot; &quot;TCGA-A8-A07I-01A-11R-A00Z-07&quot; We will take the first 12 characters of the tcga_barcode and use them to match the subtype. TCGA barcodes contain data about each sample, as explained here. The digits following the initial 12 detail whether a sample comes from a tumor or from normal tissue. There are no duplicates for patient in the subtypes table we obtained, so this will only matter if there are both normal and tumor samples for the same patient in our rse_BRCA object, in which case, both will get marked as the type of tumor. barcode_trimmed &lt;- sapply(rse_BRCA$tcga.tcga_barcode, substr, 1,12, USE.NAMES = FALSE) # Add as new column rse_BRCA$subtype &lt;- subtypes$BRCA_Subtype_PAM50[match(barcode_trimmed, subtypes$patient)] # Fix normal samples mismatched # Normal samples have the 14th digit of tcga_barcode = 1 rse_BRCA$subtype[substr(rse_BRCA$tcga.tcga_barcode, 14, 14) == 1] &lt;- &quot;Normal&quot; # Tumor samples have 14th digit = 0, if one is &quot;Normal&quot;, something went wrong, we can ignore those samples rse_BRCA$subtype[(substr(rse_BRCA$tcga.tcga_barcode, 14, 14) == 0)&amp;(rse_BRCA$subtype == &quot;Normal&quot;)] &lt;- NA Now, we will make a statistical model based on these attributes. Before that, we process our desired data one more time, ensuring data types are correct and no NA values remain. # Change type of columns of interest, numeric or factor rse_BRCA$subtype &lt;- factor(rse_BRCA$subtype) rse_BRCA$age &lt;- as.numeric(rse_BRCA$age) rse_BRCA$tumor_stage &lt;- as.numeric(rse_BRCA$tumor_stage) # Samples ncol(rse_BRCA) ## [1] 1256 # Only keep samples with no NA values in desired cols rse_BRCA &lt;- rse_BRCA[,rowSums(is.na(colData(rse_BRCA)[c(&#39;subtype&#39;, &#39;age&#39;, &#39;tumor_stage&#39;)])) == 0] ncol(rse_BRCA) ## [1] 1159 We are left with 1159 samples. We can obtain a summary of the data: summary(as.data.frame(colData(rse_BRCA)[c(&#39;subtype&#39;, &#39;age&#39;, &#39;tumor_stage&#39;)])) ## subtype age tumor_stage ## Basal :203 Min. :26.00 Min. :1.00 ## Her2 : 79 1st Qu.:48.00 1st Qu.:2.00 ## LumA :558 Median :58.00 Median :2.00 ## LumB :208 Mean :58.43 Mean :2.09 ## Normal:111 3rd Qu.:67.50 3rd Qu.:2.00 ## Max. :90.00 Max. :4.00 2.2 Normalizing data We will use the package edgeR to normalize the data, correcting for composition bias. library(&quot;edgeR&quot;) dge &lt;- DGEList( counts = assay(rse_BRCA, &quot;counts&quot;), genes = rowData(rse_BRCA) ) dge &lt;- calcNormFactors(dge) 2.3 Exploring relationships between variables Considering our three variables, we can explore the relationships between them before proceeding with the model. # Plotting library(&quot;ggplot2&quot;) # Age vs subtype ggplot(as.data.frame(colData(rse_BRCA)), aes(y = age, x = subtype)) + geom_boxplot() + theme_bw(base_size = 20) + ylab(&quot;Age&quot;) + xlab(&quot;Subtype&quot;) There are only slight differences between the age at diagnosis and the subtype. # Stage vs subtype table(colData(rse_BRCA)[c(&#39;subtype&#39;, &#39;tumor_stage&#39;)]) ## tumor_stage ## subtype 1 2 3 4 ## Basal 29 144 27 3 ## Her2 7 49 20 3 ## LumA 117 305 128 8 ## LumB 25 118 61 4 ## Normal 19 65 25 2 Stage II is the most common. For these plots, we have to keep in mind that normal samples are paired with cancer samples, the stage and age of diagnosis corresponds to the tumor associated. # Stage vs age ggplot(as.data.frame(colData(rse_BRCA)), aes(y = age, x = factor(tumor_stage))) + geom_boxplot() + theme_bw(base_size = 20) + ylab(&quot;Age&quot;) + xlab(&quot;Tumor Stage&quot;) From these plots, it appears that age is not correlated with a particular subtype or stage: the distribution of age is similar across all four stages and all subtypes. We will proceed with the following statistical model: # Change reference so Normal is the intercept in the model rse_BRCA$subtype &lt;- relevel(rse_BRCA$subtype, &quot;Normal&quot;) mod &lt;- model.matrix(~ age + subtype + tumor_stage, data = colData(rse_BRCA) ) colnames(mod) ## [1] &quot;(Intercept)&quot; &quot;age&quot; &quot;subtypeBasal&quot; &quot;subtypeHer2&quot; &quot;subtypeLumA&quot; &quot;subtypeLumB&quot; &quot;tumor_stage&quot; "],["differential-expression-analysis.html", "3 Differential expression analysis 3.1 Normal tissue 3.2 Basal subtype 3.3 Her2 subtype 3.4 LumA subtype 3.5 LumB subtype", " 3 Differential expression analysis Having defined our statistical model, we will proceed with the differential expression analysis, using the limma package. The voom function transforms count data to log2-counts per million. From this, the mean-variance relationship is used to compute observation level weights. library(&quot;limma&quot;) vGene &lt;- voom(dge, mod, plot = TRUE) Our next step is calculating different statistics, to evaluate which genes are differentially expressed in different circumstances. For this, we will use the eBayes function. Looking back at what each coefficient represents: colnames(mod) ## [1] &quot;(Intercept)&quot; &quot;age&quot; &quot;subtypeBasal&quot; &quot;subtypeHer2&quot; &quot;subtypeLumA&quot; &quot;subtypeLumB&quot; &quot;tumor_stage&quot; We will look at the genes differentially expressed with respect to coefficients 3 (Basal), 4 (Her2), 5 (LumA) and 6 (LumB), to look at the genes associated with the different subtypes. We can predict that these genes are among the ones used to distinguish the subtypes. # Empirical Bayes Statistics for Differential Expression eb_results &lt;- eBayes(lmFit(vGene)) 3.1 Normal tissue de_results_normal &lt;- topTable( eb_results, coef = 1, number = nrow(rse_BRCA), sort.by = &quot;none&quot; ) # Number of differentially expressed genes table(de_results_normal$adj.P.Val &lt; 0.05) ## ## FALSE TRUE ## 1865 62972 When compared to cancer, most genes are differentially expressed. 3.2 Basal subtype de_results_basal &lt;- topTable( eb_results, coef = 3, number = nrow(rse_BRCA), sort.by = &quot;none&quot; ) # Number of differentially expressed genes table(de_results_basal$adj.P.Val &lt; 0.05) ## ## FALSE TRUE ## 22277 42560 65% of genes are differentially expressed. # Visualizing as volcano plot volcanoplot(eb_results, coef = 3, highlight = 3, names = de_results_basal$gene_name) # Highlighted genes de_results_basal$gene_name[rank(de_results_basal$adj.P.Val) &lt; 4] ## [1] &quot;CDCA8&quot; &quot;CAVIN2&quot; &quot;HJURP&quot; 3.3 Her2 subtype de_results_her2 &lt;- topTable( eb_results, coef = 4, number = nrow(rse_BRCA), sort.by = &quot;none&quot; ) # Number of differentially expressed genes table(de_results_her2$adj.P.Val &lt; 0.05) ## ## FALSE TRUE ## 25519 39318 60% of genes are differentially expressed. # Visualizing as volcano plot volcanoplot(eb_results, coef = 4, highlight = 3, names = de_results_her2$gene_name) # Highlighted genes de_results_her2$gene_name[rank(de_results_her2$adj.P.Val) &lt; 4] ## [1] &quot;RRM2&quot; &quot;HJURP&quot; &quot;KIF4A&quot; 3.4 LumA subtype de_results_luma &lt;- topTable( eb_results, coef = 5, number = nrow(rse_BRCA), sort.by = &quot;none&quot; ) # Number of differentially expressed genes table(de_results_luma$adj.P.Val &lt; 0.05) ## ## FALSE TRUE ## 34262 30575 47% of genes are differentially expressed. # Visualizing as volcano plot volcanoplot(eb_results, coef = 5, highlight = 3, names = de_results_luma$gene_name) # Highlighted genes de_results_luma$gene_name[rank(de_results_luma$adj.P.Val) &lt; 4] ## [1] &quot;LYVE1&quot; &quot;VEGFD&quot; &quot;DMD&quot; 3.5 LumB subtype de_results_lumb &lt;- topTable( eb_results, coef = 6, number = nrow(rse_BRCA), sort.by = &quot;none&quot; ) # Number of differentially expressed genes table(de_results_lumb$adj.P.Val &lt; 0.05) ## ## FALSE TRUE ## 23569 41268 63% of genes are differentially expressed. # Visualizing as volcano plot volcanoplot(eb_results, coef = 6, highlight = 3, names = de_results_lumb$gene_name) # Highlighted genes de_results_lumb$gene_name[rank(de_results_lumb$adj.P.Val) &lt; 4] ## [1] &quot;PAMR1&quot; &quot;CAVIN2&quot; &quot;DMD&quot; "],["analysis.html", "4 Analysis 4.1 Differential Expression by Chromosome 4.2 Basal tumors 4.3 Her2 tumors 4.4 LumA tumors 4.5 LumB tumors", " 4 Analysis Let’s now look at the genes we obtained and their functions. Basal: “CDCA8” “CAVIN2” “HJURP” Her2: “RRM2” “HJURP” “KIF4A” LumA: “LYVE1” “VEGFD” “DMD” LumB: “PAMR1” “CAVIN2” “DMD” Looking at what each of the genes does: - CDCA8: Cell Division Cycle Associated 8. It is a component of the chromosomal passenger complex (CPC), a complex that acts as a key regulator of mitosis. - CAVIN2: Caveolae Associated Protein 2, plays an important role in caveolar biogenesis and morphology. - HJURP: Holliday Junction Recognition Protein, participates in DNA damage and mitotic cell cycle pathways. Genecards mentions it is associated with Luminal A subtype. - RRM2: Ribonucleotide Reductase Regulatory Subunit M2, catalyzes the biosynthesis of deoxyribonucleotides from the corresponding ribonucleotides, necessary for DNA synthesis. - KIF4A: Kinesin Family Member 4A, ATP dependent microtubule-based motor protein that is involved in the intracellular transport of membranous organelles. - LYVE1: Lymphatic Vessel Endothelial Hyaluronan Receptor 1, plays a role in autocrine regulation of cell growth. - VEGFD: Vascular Endothelial Growth Factor D, growth factor active in angiogenesis, lymphangiogenesis and endothelial cell growth, stimulating their proliferation and migration and also has effects on the permeability of blood vessels. - DMD: Dystrophin, forms a component of the dystrophin-glycoprotein complex (DGC), which bridges the inner cytoskeleton and the extracellular matrix. - PAMR1: Peptidase Domain Containing Associated With Muscle Regeneration 1, may play a role in regeneration of skeletal muscle. We can see that most of these genes are related to cell growth and mitotic cell division, two pathways that are commonly misregulated in cancer. One, HJURP, is associated with Luminal A breast cancer, but in our analysis turned out to be more significant for Basal and Her2 subtypes. Interestingly, of the 9 different genes considered here, only one, “RRM2” is among the 50 genes in the PAM50 list defining the subtypes. However, we only considered the three with lowest values for each subtype, expanding this analysis to more genes may result in more genes in the list arising. We can visualize the difference in expression of these genes through a heatmap, using the pheatmap library. library(&quot;pheatmap&quot;) # Col data df_col&lt;- as.data.frame(rse_BRCA$subtype) colnames(df_col) &lt;- &quot;Subtype&quot; rownames(df_col) &lt;- colnames(rse_BRCA) # PAM50 genes PAM50 &lt;- c(&quot;UBE2T&quot;,&quot;BIRC5&quot;,&quot;NUF2&quot;,&quot;CDC6&quot;,&quot;CCNB1&quot;,&quot;TYMS&quot;,&quot;MYBL2&quot;,&quot;CEP55&quot;,&quot;MELK&quot;,&quot;NDC80&quot;,&quot;RRM2&quot;,&quot;UBE2C&quot;,&quot;CENPF&quot;,&quot;PTTG1&quot;,&quot;EXO1&quot;,&quot;ORC6&quot;,&quot;ANLN&quot;,&quot;CCNE1&quot;,&quot;CDC20&quot;,&quot;MKI67&quot;,&quot;KIF2C&quot;,&quot;ACTR3B&quot; ,&quot;MYC&quot;,&quot;EGFR&quot;,&quot;KRT5&quot;,&quot;PHGDH&quot;,&quot;CDH3&quot;,&quot;MIA&quot;,&quot;KRT17&quot;,&quot;FOXC1&quot;,&quot;SFRP1&quot;,&quot;KRT14&quot;,&quot;ESR1&quot;,&quot;SLC39A6&quot;,&quot;BAG1&quot;,&quot;MAPT&quot;,&quot;PGR&quot;,&quot;CXXC5&quot;,&quot;MLPH&quot;,&quot;BCL2&quot;,&quot;MDM2&quot;,&quot;NAT1&quot;,&quot;FOXA1&quot;,&quot;BLVRA&quot;,&quot;MMP11&quot;,&quot;GPR160&quot;,&quot;FGFR4&quot;,&quot;GRB7&quot;,&quot;TMEM45B&quot;,&quot;ERBB2&quot;) # Matching genes to ids PAM50_ids &lt;- match(PAM50, rowData(rse_BRCA)$gene_name) # Filtering table PAM50_exp &lt;- vGene$E[PAM50_ids, ] pheatmap( PAM50_exp, cluster_cols = TRUE, cluster_rows = TRUE, show_rownames = FALSE, show_colnames = FALSE, annotation_col = df_col ) We can see that the subtypes do not all cluster together, even with the genes that differentiate between them. The Basal subtype seems to be the most different from the rest, and it is also the most aggressive of all subtypes, with the worst clinical outcome. 4.1 Differential Expression by Chromosome Lastly, we will look at which chromosomes contain the most differentially expressed genes by subtype, focusing on the 1K protein-coding genes with smallest adjusted p-values. # Function to extract expression of protein coding genes with lowest p vals diff_exp_genes &lt;- function(de_results, n=1000) { # Filtering protein coding protein_coding &lt;- de_results[de_results$gene_type == &#39;protein_coding&#39;, ] # Selecting top n smallest_p_vals &lt;- protein_coding$gene_id[rank(protein_coding$adj.P.Val) &lt;= n] # Getting these genes for heatmap exprs_heatmap &lt;- vGene$E[match(smallest_p_vals, rownames(vGene)), ] return(exprs_heatmap) } To visualize how many differentially expressed genes there are in each chromosome, we can use the chromosome data from seqnames in rowRanges(rse_BRCA). chr_df &lt;- function(exprs) { # Get genes from row names genes &lt;- rownames(exprs) # Access chr name from rowRanges chrs &lt;- seqnames(rowRanges(rse_BRCA)[genes]) # Drop unused levels, count occurrences df &lt;- table(droplevels(chrs)) df &lt;- as.data.frame(df) colnames(df) &lt;- c(&quot;Chromosome&quot;, &quot;Frequency&quot;) return(df) } 4.2 Basal tumors diff_basal &lt;- diff_exp_genes(de_results_basal) pheatmap( diff_basal, cluster_cols = TRUE, cluster_rows = TRUE, show_rownames = FALSE, show_colnames = FALSE, annotation_col = df_col ) df &lt;- chr_df(diff_basal) ggplot(df, aes(x=Chromosome, y=Frequency)) + geom_bar(stat=&quot;identity&quot;, fill=&quot;palegreen4&quot;) 4.3 Her2 tumors diff_her2 &lt;- diff_exp_genes(de_results_her2) pheatmap( diff_her2, cluster_cols = TRUE, cluster_rows = TRUE, show_rownames = FALSE, show_colnames = FALSE, annotation_col = df_col ) df &lt;- chr_df(diff_her2) ggplot(df, aes(x=Chromosome, y=Frequency)) + geom_bar(stat=&quot;identity&quot;, fill=&quot;palegreen4&quot;) 4.4 LumA tumors diff_luma &lt;- diff_exp_genes(de_results_luma) pheatmap( diff_luma, cluster_cols = TRUE, cluster_rows = TRUE, show_rownames = FALSE, show_colnames = FALSE, annotation_col = df_col ) df &lt;- chr_df(diff_luma) ggplot(df, aes(x=Chromosome, y=Frequency)) + geom_bar(stat=&quot;identity&quot;, fill=&quot;palegreen4&quot;) 4.5 LumB tumors diff_lumb &lt;- diff_exp_genes(de_results_lumb) pheatmap( diff_lumb, cluster_cols = TRUE, cluster_rows = TRUE, show_rownames = FALSE, show_colnames = FALSE, annotation_col = df_col ) df &lt;- chr_df(diff_lumb) ggplot(df, aes(x=Chromosome, y=Frequency)) + geom_bar(stat=&quot;identity&quot;, fill=&quot;palegreen4&quot;) "]]
